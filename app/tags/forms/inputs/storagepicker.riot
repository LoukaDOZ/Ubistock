<!-- Tag to select storage -->
<storagepicker getValues="{ getValues }">
    <!-- Label -->
    <label if="{ props.label }" class="mt-3">{ props.label }
        <span if="{ props.required }" class="text-primary"> *</span>
    </label>

    <!-- Input -->
    <div class="card { !props.label ? 'mt-3' : '' }">
        <!-- Head -->
        <div class="card-header d-flex flex-wrap justify-content-between align-items-center">
            <span>Choose a storage</span>
            <!-- Select storage button -->
            <button type="button" class="btn btn-primary" onclick="{ onShowExplorer }">
                + Select a new storage
            </button>
        </div>

        <!-- Body -->
        <div class="card-body p-0 rounded-0" style="overflow-y: scroll; max-height: 50vh;">
            <!-- Selected list -->
            <ul id="list-group-collapse" class="list-group rounded-0 collapse show">
                <!-- Each selected storage -->
                <li class="list-group-item rounded-0 list-group-item-action d-flex flex-wrap justify-content-between align-items-center
                { index > 0 ? 'border-top border-right-0 border-left-0 border-bottom-0' : 'border-0' }" each="{ (selected,index) in selection }">

                    { selected['storage_name'] }

                    <div class="m-0 p-0">
                        <!-- See -->
                        <a href="" type="button" class="text-decoration-none nav-link text-dark mr-3 p-0 d-inline-block" onclick="{ onSee(selected) }">
                            <svg width="1.25em" height="1.25em" viewBox="0 0 16 16" class="bi bi-eye" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                                <path fill-rule="evenodd" d="M16 8s-3-5.5-8-5.5S0 8 0 8s3 5.5 8 5.5S16 8 16 8zM1.173 8a13.134 13.134 0 0 0 1.66 2.043C4.12 11.332 5.88 12.5 8 12.5c2.12 0 3.879-1.168 5.168-2.457A13.134 13.134 0 0 0 14.828 8a13.133 13.133 0 0 0-1.66-2.043C11.879 4.668 10.119 3.5 8 3.5c-2.12 0-3.879 1.168-5.168 2.457A13.133 13.133 0 0 0 1.172 8z"/>
                                <path fill-rule="evenodd" d="M8 5.5a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5zM4.5 8a3.5 3.5 0 1 1 7 0 3.5 3.5 0 0 1-7 0z"/>
                            </svg>
                        </a>
                        <!-- Deselect -->
                        <a href="" type="button" class="text-decoration-none nav-link text-dark p-0 d-inline-block" onclick="{ onDeselect(selected) }">
                            <svg class="bi bi-trash" width="1.25em" height="1.25em" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                                <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/>
                                <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4L4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"/>
                            </svg>
                        </a>
                    </div>
                </li>
            </ul>
        </div>
    </div>

    <!-- Storage explorer -->
    <storageexplorer show="{ explore || view }" onchoose="{ onSelect }" see="{ view || '' }"/>

    <script>
        export default {
            CONSTANTS: CONSTANTS,
            //Is explorer showed
            explore: false,
            //Is an update from himself
            internalUpdate: false,
            //Show a storage
            view: null,
            //Selection
            selection: [],
            //Before tag is mounted
            onBeforeMount() {
                //Set selection from given value
                this.selection = this.props.value || [];
            },
            //Before tag updates
            onBeforeUpdate() {
                if(!this.internalUpdate)
                    //If parent update, set selection from given value
                    this.selection = this.props.value || [];
                else
                    this.internalUpdate = false;
            },
            //Show explorer
            onShowExplorer(e) {
                e.preventDefault();
                //Show explorer
                this.explore = true;
                //Don't reset selection
                this.internalUpdate = true;
                this.update();
            },
            //Select storage
            onSelect(storage) {
                return (e)=> {
                    e.preventDefault();
                    //Close explorer
                    this.explore = false;
                    this.view = null;
      
                    if(storage) {
      				//If a storage has been selected
                        let found = false;
                        for (let i of this.selection) {
                            //For each storage in selection
                            if (i['storage_id'] === storage['storage_id']) {
                                //If the storage is already selected
                                found = true;
                                break;
                            }
                        }

                        if(!found)
                            //Select storage if not already selected
                            this.selection.push(storage);
                    }
      
                    //Don't reset selection
                    this.internalUpdate = true;
                    this.update();
                };
            },
            //Deselect storage
            onDeselect(storage) {
                return (e)=> {
                    e.preventDefault();
                    //Deselect
                    this.selection.splice(this.selection.indexOf(storage,1));
                    //Don't reset selection
                    this.internalUpdate = true;
                    this.update();
                };
            },
            //See storage in storage explorer
            onSee(storage) {
                return (e)=> {
                    e.preventDefault();
                    //Show storage
                    this.view = storage;
                    //Don't reset selection
                    this.internalUpdate = true;
                    this.update();
                };
            },
            //Get values
            getValues() {
                //Don't reset selection
                this.internalUpdate = true;
                return {
                    storage: this.selection
                }
            }
        }
    </script>
</storagepicker>